/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.progex.zoomanagementsoftware.admin;

import com.progex.zoomanagementsoftware.ManagersAndHandlers.UserManager;
import com.progex.zoomanagementsoftware.ManagersAndHandlers.ZooManager;
import com.progex.zoomanagementsoftware.datatypes.Address;
import com.progex.zoomanagementsoftware.datatypes.Methods;
import com.progex.zoomanagementsoftware.datatypes.Shift;
import com.progex.zoomanagementsoftware.datatypes.User;
import com.progex.zoomanagementsoftware.datatypes.Zookeeper;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
//import javax.swing.table.TableColumnModel;

/**
 *
 * @author Ouchen
 */
public class ManageUserJFrame extends javax.swing.JFrame {

    /**
     * Creates new form ManageUserJFrame
     *
     * @param goBackFrame The frame which will appear when the go back button is
     * used
     */
    public ManageUserJFrame(JFrame goBackFrame, ZooManager zooManager) {
        initComponents();
        this.goBackFrame = goBackFrame;
        this.zooManager = zooManager;
        userManager = zooManager.getUserManager();
        methods = new Methods();
        methods.showTimeAndDate(jLabelShowDateTime);
        myInitComponents();
    }

    private void myInitComponents() {

        updateButtonsAndLabels();
       // LinkedList<User> users = userManager.getUsers();
       // viewUsers(users);
    }

    private void viewUsers(LinkedList<User> users) {

        cleanTable();
        DefaultTableModel model = (DefaultTableModel) jTableUserData.getModel();
        Object[] row = new Object[13]; // Spalten

        for (User user : users) {

            row[0] = user.getId();
            if (user instanceof Zookeeper) {
                Shift shift = ((Zookeeper) user).getShift();
                row[1] = methods.shiftToString(shift);
            } else {
                row[1] = "Keine";
            }
            row[2] = methods.salutationToString(user.getSalutation());
            row[3] = user.getUsername();
            row[4] = user.getFirstname();
            row[5] = user.getLastname();
            row[6] = user.getPhoneNumber();
            row[7] = user.getBirthday();
            row[8] = user.getEmail();

            Address address = user.getAddress();
            row[9] = address.getZip();
            row[10] = address.getStreet();
            row[11] = address.getCity();
            row[12] = address.getCountry();

            model.addRow(row);
        }

    }

    private void cleanTable() {

        DefaultTableModel tableModel = (DefaultTableModel) jTableUserData.getModel();
        while (tableModel.getRowCount() > 0) {
            tableModel.removeRow(0);
        }
    }

    /**
     * ICH WÜRDE ES EHER IN DER DATENBANK VERÄNDERN..., dann fallen UNNÖTIGE
     * Übersetzungen weg !
     *
     * @return
     */
    private String getGermanShiftString() {

        if (userType.equals("Zookeeper")) {
            String shiftStr = jComboBoxShift.getSelectedItem().toString();

            /*Nachteil, da shift auf englisch in der DB ist*/
            switch (shiftStr) {
                case "Früh":
                    return "Morning";

                case "Nachmittag":
                    return "Afternoon";

                case "Spät":
                    return "Night";
            }
        }
        return "None";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupUserType = new javax.swing.ButtonGroup();
        buttonGroupOperation = new javax.swing.ButtonGroup();
        jLabelID = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();
        jButtonGoBack = new javax.swing.JButton();
        jScrollPaneUserData = new javax.swing.JScrollPane();
        jTableUserData = new javax.swing.JTable();
        jRadioButtonZookeeper = new javax.swing.JRadioButton();
        jLabelUserType = new javax.swing.JLabel();
        jRadioButtonAdmin = new javax.swing.JRadioButton();
        jPanelOperation = new javax.swing.JPanel();
        jLabelOperation = new javax.swing.JLabel();
        jButtonHelp = new javax.swing.JButton();
        jRadioButtonAdd = new javax.swing.JRadioButton();
        jRadioButtonUpdate = new javax.swing.JRadioButton();
        jRadioButtonDelete = new javax.swing.JRadioButton();
        jLabelSalutation = new javax.swing.JLabel();
        jComboBoxSalutation = new javax.swing.JComboBox<>();
        jLabelFirstname = new javax.swing.JLabel();
        jTextFieldFirstname = new javax.swing.JTextField();
        jLabelLastname = new javax.swing.JLabel();
        jTextFieldLastname = new javax.swing.JTextField();
        jLabelStreet = new javax.swing.JLabel();
        jTextFieldStreet = new javax.swing.JTextField();
        jLabelZIP = new javax.swing.JLabel();
        jTextFieldZIP = new javax.swing.JTextField();
        jLabelCity = new javax.swing.JLabel();
        jTextFieldCity = new javax.swing.JTextField();
        jLabelCountry = new javax.swing.JLabel();
        jTextFieldCountry = new javax.swing.JTextField();
        jLabelPhoneNumber = new javax.swing.JLabel();
        jTextFieldPhoneNumber = new javax.swing.JTextField();
        jLabelBirthday = new javax.swing.JLabel();
        jLabelShift = new javax.swing.JLabel();
        jLabelUsername = new javax.swing.JLabel();
        jLabelEMail = new javax.swing.JLabel();
        jLabelPassword = new javax.swing.JLabel();
        jLabelConfirmPassword = new javax.swing.JLabel();
        jTextFieldEMail = new javax.swing.JTextField();
        jTextFieldUsername = new javax.swing.JTextField();
        jComboBoxShift = new javax.swing.JComboBox<>();
        jTextFieldBirthday = new javax.swing.JTextField();
        jButtonAddUser = new javax.swing.JButton();
        jButtonUpdateUser = new javax.swing.JButton();
        jButtonDeleteUser = new javax.swing.JButton();
        jLabelSearch = new javax.swing.JLabel();
        jButtonSearch = new javax.swing.JButton();
        jLabelShowDateTime = new javax.swing.JLabel();
        jButtonAnimalsToZookeeper = new javax.swing.JButton();
        jPasswordFieldEnteredPW = new javax.swing.JPasswordField();
        jPasswordFieldConfirm = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Benutzer Verwalten");
        setResizable(false);

        jLabelID.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelID.setText("ID");

        jButtonGoBack.setText("Zurück");
        jButtonGoBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGoBackActionPerformed(evt);
            }
        });

        jScrollPaneUserData.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPaneUserData.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTableUserData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Shift", "Anrede", "Benutzername", "Vorname", "Nachname", "Telefonnummer", "Geburtstag", "E-Mail", "Plz", "Straße", "Stadt", "Land"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableUserData.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableUserData.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTableUserData.getTableHeader().setReorderingAllowed(false);
        jTableUserData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableUserDataMouseClicked(evt);
            }
        });
        jScrollPaneUserData.setViewportView(jTableUserData);
        if (jTableUserData.getColumnModel().getColumnCount() > 0) {
            jTableUserData.getColumnModel().getColumn(3).setPreferredWidth(180);
            jTableUserData.getColumnModel().getColumn(8).setPreferredWidth(180);
            jTableUserData.getColumnModel().getColumn(10).setPreferredWidth(180);
            jTableUserData.getColumnModel().getColumn(11).setPreferredWidth(180);
        }

        buttonGroupUserType.add(jRadioButtonZookeeper);
        jRadioButtonZookeeper.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jRadioButtonZookeeper.setText("Tierpfleger/ -in");
        jRadioButtonZookeeper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonZookeeperActionPerformed(evt);
            }
        });

        jLabelUserType.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabelUserType.setText("Bitte geben Sie den Usertype an");

        buttonGroupUserType.add(jRadioButtonAdmin);
        jRadioButtonAdmin.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jRadioButtonAdmin.setSelected(true);
        jRadioButtonAdmin.setText("Admin");
        jRadioButtonAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonAdminActionPerformed(evt);
            }
        });

        jLabelOperation.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabelOperation.setText("Bitte geben Sie die gewünschte Operation an");

        jButtonHelp.setText("Hilfe");
        jButtonHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHelpActionPerformed(evt);
            }
        });

        buttonGroupOperation.add(jRadioButtonAdd);
        jRadioButtonAdd.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jRadioButtonAdd.setSelected(true);
        jRadioButtonAdd.setText("Hinzufügen");
        jRadioButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonAddActionPerformed(evt);
            }
        });

        buttonGroupOperation.add(jRadioButtonUpdate);
        jRadioButtonUpdate.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jRadioButtonUpdate.setText("Updaten");
        jRadioButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonUpdateActionPerformed(evt);
            }
        });

        buttonGroupOperation.add(jRadioButtonDelete);
        jRadioButtonDelete.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jRadioButtonDelete.setText("Löschen");
        jRadioButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelOperationLayout = new javax.swing.GroupLayout(jPanelOperation);
        jPanelOperation.setLayout(jPanelOperationLayout);
        jPanelOperationLayout.setHorizontalGroup(
            jPanelOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOperationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelOperationLayout.createSequentialGroup()
                        .addComponent(jLabelOperation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonHelp))
                    .addComponent(jRadioButtonDelete)
                    .addComponent(jRadioButtonUpdate)
                    .addComponent(jRadioButtonAdd))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelOperationLayout.setVerticalGroup(
            jPanelOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOperationLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanelOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelOperation)
                    .addComponent(jButtonHelp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
                .addComponent(jRadioButtonAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonDelete)
                .addContainerGap())
        );

        jLabelSalutation.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelSalutation.setText("Anrede");

        jComboBoxSalutation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Herr", "Frau", "Divers" }));
        jComboBoxSalutation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSalutationActionPerformed(evt);
            }
        });

        jLabelFirstname.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelFirstname.setText("Vorname");

        jLabelLastname.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelLastname.setText("Nachname");

        jLabelStreet.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelStreet.setText("Straße");

        jTextFieldStreet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldStreetActionPerformed(evt);
            }
        });

        jLabelZIP.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelZIP.setText("PLZ");

        jLabelCity.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelCity.setText("Stadt");

        jLabelCountry.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelCountry.setText("Land");

        jLabelPhoneNumber.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelPhoneNumber.setText("Telefonnummer");

        jLabelBirthday.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelBirthday.setText("Geburtstag");

        jLabelShift.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelShift.setText("Schicht");

        jLabelUsername.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelUsername.setText("Benutzername");

        jLabelEMail.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelEMail.setText("E-Mail");

        jLabelPassword.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelPassword.setText("Passwort");

        jLabelConfirmPassword.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelConfirmPassword.setText("Passwort bestätigen");

        jComboBoxShift.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Früh", "Nachmittag", "Spät" }));
        jComboBoxShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxShiftActionPerformed(evt);
            }
        });

        jTextFieldBirthday.setToolTipText("Format: yyyy-MM-dd");

        jButtonAddUser.setText("Hinzufügen");
        jButtonAddUser.setPreferredSize(new java.awt.Dimension(73, 23));
        jButtonAddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddUserActionPerformed(evt);
            }
        });

        jButtonUpdateUser.setText("Updaten");
        jButtonUpdateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateUserActionPerformed(evt);
            }
        });

        jButtonDeleteUser.setText("Löschen");
        jButtonDeleteUser.setMaximumSize(new java.awt.Dimension(87, 23));
        jButtonDeleteUser.setMinimumSize(new java.awt.Dimension(87, 23));
        jButtonDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteUserActionPerformed(evt);
            }
        });

        jLabelSearch.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelSearch.setText("Suche Anhand nicht leerer Felder");

        jButtonSearch.setText("Suche");
        jButtonSearch.setMaximumSize(new java.awt.Dimension(73, 23));
        jButtonSearch.setMinimumSize(new java.awt.Dimension(73, 23));
        jButtonSearch.setPreferredSize(new java.awt.Dimension(73, 23));
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jLabelShowDateTime.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabelShowDateTime.setText("TIME");

        jButtonAnimalsToZookeeper.setText("Tierart um die sich gekümmert werden soll ?");
        jButtonAnimalsToZookeeper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnimalsToZookeeperActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelSearch))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(485, 485, 485)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonUpdateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonDeleteUser, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelLastname)
                                    .addComponent(jLabelStreet)
                                    .addComponent(jLabelZIP)
                                    .addComponent(jLabelCity)
                                    .addComponent(jLabelCountry)
                                    .addComponent(jLabelPhoneNumber)
                                    .addComponent(jLabelSalutation))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jComboBoxSalutation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextFieldPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextFieldCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabelConfirmPassword))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextFieldCity, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabelPassword))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jTextFieldStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jTextFieldZIP, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabelEMail)
                                                    .addComponent(jLabelUsername)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextFieldLastname, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabelShift))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextFieldFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabelBirthday)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 1, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jComboBoxShift, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jTextFieldBirthday, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                                    .addComponent(jTextFieldEMail, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                                    .addComponent(jPasswordFieldEnteredPW)))
                                            .addComponent(jPasswordFieldConfirm))
                                        .addGap(56, 56, 56))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(83, 83, 83)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jRadioButtonZookeeper)
                                            .addComponent(jRadioButtonAdmin)
                                            .addComponent(jLabelUserType, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(48, 48, 48)
                                        .addComponent(jPanelOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jButtonGoBack, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButtonAnimalsToZookeeper)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelID)
                                .addGap(30, 30, 30)
                                .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPaneUserData, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelShowDateTime))))
                .addGap(59, 59, 59))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonGoBack)
                            .addComponent(jLabelShowDateTime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelID)
                            .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPaneUserData, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelOperation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabelUserType, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonAdmin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButtonZookeeper)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxSalutation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelSalutation))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabelBirthday)
                                .addComponent(jTextFieldBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextFieldFirstname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelFirstname)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldLastname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelShift)
                            .addComponent(jComboBoxShift, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelLastname))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabelUsername)
                                .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelStreet)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelZIP)
                            .addComponent(jTextFieldZIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelEMail)
                            .addComponent(jTextFieldEMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelCity)
                            .addComponent(jTextFieldCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelPassword)
                            .addComponent(jPasswordFieldEnteredPW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelCountry)
                            .addComponent(jTextFieldCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelConfirmPassword)
                            .addComponent(jPasswordFieldConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPhoneNumber)
                            .addComponent(jTextFieldPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonUpdateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonDeleteUser, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonAnimalsToZookeeper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGoBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGoBackActionPerformed

        goBackFrame.setVisible(true);
        //Close frame
        this.dispose();
    }//GEN-LAST:event_jButtonGoBackActionPerformed


    private void jRadioButtonZookeeperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonZookeeperActionPerformed

        updateButtonsAndLabels();
    }//GEN-LAST:event_jRadioButtonZookeeperActionPerformed

    private void jRadioButtonAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonAdminActionPerformed

        updateButtonsAndLabels();
    }//GEN-LAST:event_jRadioButtonAdminActionPerformed

    private void jComboBoxSalutationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSalutationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxSalutationActionPerformed

    private void jTextFieldStreetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldStreetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldStreetActionPerformed

    private void jComboBoxShiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxShiftActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxShiftActionPerformed

    private void jButtonAddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddUserActionPerformed

        //TODO CHECK IF BIRTHDAY IS VALID DATE
        jTextFieldID.setText("");
        JTextField textFields[] = {jTextFieldFirstname, jTextFieldLastname,
            jTextFieldStreet, jTextFieldZIP,
            jTextFieldCity, jTextFieldCountry,
            jTextFieldPhoneNumber, jTextFieldBirthday,
            jTextFieldUsername, jTextFieldEMail};

        boolean textFieldsVerified = methods.verifyTextFields(textFields);

        if (textFieldsVerified) {

            String salutationStr = jComboBoxSalutation.getSelectedItem().toString();
            //TODO CHAR ARRAY FOR SECURITY
            //char password[] = jPasswordFieldEnteredPW.getPassword();
            //char confirmedPassword[] = jPasswordFieldConfirm.getPassword();
            String password = jPasswordFieldEnteredPW.getText();
            String confirmedPassword = jPasswordFieldConfirm.getText();
            String shiftStr = "None";

            //No only white spaces and no empty password
            if (!password.isBlank() && password.equals(confirmedPassword)) {

                String firstname = jTextFieldFirstname.getText();
                String lastname = jTextFieldLastname.getText();
                String street = jTextFieldStreet.getText();
                String zip = jTextFieldZIP.getText();
                String city = jTextFieldCity.getText();
                String country = jTextFieldCountry.getText();
                String phonenumber = jTextFieldPhoneNumber.getText();
                String birthday = jTextFieldBirthday.getText();
                String username = jTextFieldUsername.getText();
                String email = jTextFieldEMail.getText();

                try {

                    if (!methods.isValidDateString(birthday)) {
                        throw new IllegalArgumentException();
                    }

                    //If user is a zookeeper
                    if (userType.equals("Zookeeper")) {

                        shiftStr = getGermanShiftString();
                    }
                    
                    if (!userManager.usernameExists(username)){
                    
                    
                    
                    if (userManager.addUser(userType, salutationStr, firstname, lastname,
                            street, zip, city, country, phonenumber,
                            birthday, shiftStr, username, email, password)) {

                        JOptionPane.showMessageDialog(null, "Nutzer/-in konnte erfolgreich eingefügt werden!", "Einfügen erfolgreich", JOptionPane.INFORMATION_MESSAGE);

                        LinkedList<User> users = userManager.getUsers();
                        viewUsers(users);

                    } else {

                        JOptionPane.showMessageDialog(null, "Nutzer/-in konnte nicht eingefügt werden!", "Einfügen fehlgeschlagen", JOptionPane.CANCEL_OPTION);

                    }

                    
                    } else {
                    
                         JOptionPane.showMessageDialog(null, "Nutzer/-in konnte nicht eingefügt werden!", "Benutzername bereits vergeben", JOptionPane.CANCEL_OPTION);
                    }
                    
                } catch (IllegalArgumentException illegalArgumentException) {

                    System.err.println("Illegal Argument");
                    System.out.println(illegalArgumentException.getMessage());
                    JOptionPane.showMessageDialog(null, "Bitte Geburtstsag im format yyyy-MM-dd eintragen !", "Falsches Datumformat", JOptionPane.CANCEL_OPTION);
                }

            } else {

                JOptionPane.showMessageDialog(null, "Bitte überprüfen Sie die passwörter", "Passwörter nicht identisch", JOptionPane.CANCEL_OPTION);

            }

        }

    }//GEN-LAST:event_jButtonAddUserActionPerformed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed

        String firstname = jTextFieldFirstname.getText().trim();
        String lastname = jTextFieldLastname.getText().trim();
        String street = jTextFieldStreet.getText().trim();//
        String zip = jTextFieldZIP.getText().trim();//
        String city = jTextFieldCity.getText().trim(); //
        String country = jTextFieldCountry.getText().trim();
        String phonenumber = jTextFieldPhoneNumber.getText().trim();
        String birthday = jTextFieldBirthday.getText().trim();
        String username = jTextFieldUsername.getText().trim();
        String email = jTextFieldEMail.getText().trim();
        String salutationStr = jComboBoxSalutation.getSelectedItem().toString();
        String userID = jTextFieldID.getText().trim(); //TODO PARSE ID AS INTEGER

        String shiftStr = getGermanShiftString();

        int addressIdInt = userManager.searchAddressId(zip, street, city);
        String addressId = "";
        if (addressIdInt != -1) {
            addressId = String.valueOf(addressIdInt);
        }

        LinkedHashMap<String, String> columnNameToValue = new LinkedHashMap<String, String>();
        columnNameToValue.put("Address.ID", addressId); //TODO FILTER OUT -1
        columnNameToValue.put("FirstName", firstname);
        columnNameToValue.put("LastName", lastname);
        columnNameToValue.put("Coutry", country); //macht country sinn???
        columnNameToValue.put("PhoneNumber", phonenumber);
        columnNameToValue.put("Birthday", birthday);
        columnNameToValue.put("UserName", username);
        columnNameToValue.put("Email", email);
        columnNameToValue.put("Salutation", salutationStr);
        columnNameToValue.put("User.ID", userID);
        //Überlegen, macht eine address spezifische suche sinn ? 
        columnNameToValue.put("Zip", zip);
        columnNameToValue.put("Street", street);
        columnNameToValue.put("Country", country);
        LinkedList<User> users = userManager.searchUsers(columnNameToValue);
        viewUsers(users);

    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButtonHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHelpActionPerformed

        String mode = updateButtonsAndLabels();
        //System.out.println(mode); //Debug

        //Get the mode
        switch (mode) {

            case "Add admin":
                JOptionPane.showMessageDialog(null, "Daten eingeben und auf Hinzufügen klicken", "Hinzufügen", JOptionPane.INFORMATION_MESSAGE);
                break;

            case "Add zookeeper":
                JOptionPane.showMessageDialog(null, "Daten eingeben und auf Hinzufügen klicken", "Hinzufügen", JOptionPane.INFORMATION_MESSAGE);
                break;

            case "Update admin":
                JOptionPane.showMessageDialog(null, "Bitte die Daten des zu updatenden Admins ausfüllen oder den Datensatz in der Tabelle anklicken und bearbeiten! ", "Updaten", JOptionPane.INFORMATION_MESSAGE);
                break;

            case "Update zookeeper":
                JOptionPane.showMessageDialog(null, "Bitte die Daten des zu updatenden Tierpfleger/-in ausfüllen oder den Datensatz in der Tabelle anklicken und bearbeiten! ", "Updaten", JOptionPane.INFORMATION_MESSAGE);
                break;

            case "Delete admin":
                JOptionPane.showMessageDialog(null, "Bitte die ID des zu löschenden Admins ausfüllen oder den Datensatz in der Tabelle anklicken!", "Löschen", JOptionPane.INFORMATION_MESSAGE);
                break;

            case "Delete zookeeper":
                JOptionPane.showMessageDialog(null, "Bitte die ID des zu löschenden Tierpfleger/-in ausfüllen oder den Datensatz in der Tabelle anklicken!", "Löschen", JOptionPane.INFORMATION_MESSAGE);
                break;
        }
    }//GEN-LAST:event_jButtonHelpActionPerformed

    private void jRadioButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonAddActionPerformed
        cleanTable();
        updateButtonsAndLabels();
    }//GEN-LAST:event_jRadioButtonAddActionPerformed

    private void jRadioButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonUpdateActionPerformed

        updateButtonsAndLabels();
    }//GEN-LAST:event_jRadioButtonUpdateActionPerformed

    private void jRadioButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonDeleteActionPerformed

        updateButtonsAndLabels();
    }//GEN-LAST:event_jRadioButtonDeleteActionPerformed

    private void jButtonDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteUserActionPerformed

        JTextField textFields[] = {jTextFieldID};
        boolean textFieldsVerified = methods.verifyTextFields(textFields);

        try {
            int ID = Integer.parseInt(jTextFieldID.getText());

            if (textFieldsVerified) {

                //Nachfragen ob er sich sicher ist, hier if Abfrage mache
                //TODO Cancel auf deutsch
                int decision = JOptionPane.showConfirmDialog(null,
                        "Sind Sie sicher", "Löschbestätigung",
                        JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (decision == 0) {
                    if (userManager.deleteUser(ID)) {
                        //Falls Löschen erfolgreich, pfeil wäre besser
                        JOptionPane.showMessageDialog(null, "Nutzer/-in wurde erfolgreich aus der Datenbank entfernt!", "Bestätigung", JOptionPane.INFORMATION_MESSAGE);
                        LinkedList<User> users = userManager.getUsers();
                        viewUsers(users);
                    } else {
                        //Falls Fehler beim Löschen
                        JOptionPane.showMessageDialog(null, "Tier konnte nicht gelöscht werden!", "Löschen fehlgeschlagen", JOptionPane.CANCEL_OPTION);

                    }

                }

            }

        } catch (NumberFormatException numberFormatException) {

            System.err.println("NumberFormatException");
            System.out.println(numberFormatException.getMessage());
            JOptionPane.showMessageDialog(null, "Nutzer/-in konnte nicht gelöscht werden !", "IDfeld falsch ausgefüllt", JOptionPane.CANCEL_OPTION);
        }

    }//GEN-LAST:event_jButtonDeleteUserActionPerformed

    private void jButtonUpdateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateUserActionPerformed

        //TODO CHECK IF BIRTHDAY IS VALID DATE
        //TODO MAKE UPDATE PASSWORDS AS OPTIONAL
        JTextField textFields[] = {jTextFieldFirstname, jTextFieldLastname,
            jTextFieldStreet, jTextFieldZIP,
            jTextFieldCity, jTextFieldCountry,
            jTextFieldPhoneNumber, jTextFieldBirthday,
            jTextFieldUsername, jTextFieldEMail};

        boolean textFieldsVerified = methods.verifyTextFields(textFields);

        if (textFieldsVerified) {

            String salutationStr = jComboBoxSalutation.getSelectedItem().toString();
            //TODO CHAR ARRAY FOR SECURITY
            //char password[] = jPasswordFieldEnteredPW.getPassword();
            //char confirmedPassword[] = jPasswordFieldConfirm.getPassword();
            String password = jPasswordFieldEnteredPW.getText();
            String confirmedPassword = jPasswordFieldConfirm.getText();
            String shiftStr = "None";
            try {
                int id = Integer.parseInt(jTextFieldID.getText());

                //Use
                //No only white spaces and no empty password
                if (!password.isBlank() && password.equals(confirmedPassword)) {

                    String firstname = jTextFieldFirstname.getText();
                    String lastname = jTextFieldLastname.getText();
                    String street = jTextFieldStreet.getText();
                    String zip = jTextFieldZIP.getText();
                    String city = jTextFieldCity.getText();
                    String country = jTextFieldCountry.getText();
                    String phonenumber = jTextFieldPhoneNumber.getText();
                    String birthday = jTextFieldBirthday.getText();
                    String username = jTextFieldUsername.getText();
                    String email = jTextFieldEMail.getText();
                    if (!methods.isValidDateString(birthday)) {
                        throw new IllegalArgumentException();
                    }
                    //If user is a zookeeper
                    if (userType.equals("Zookeeper")) {
                        shiftStr = getGermanShiftString();

                    }

                    if (!userManager.usernameExists(username)){
                    
                    if (userManager.updateUser(id, userType, salutationStr, firstname,
                            lastname, street, zip, city, country,
                            phonenumber, birthday, shiftStr, username, email, password)) {

                        JOptionPane.showMessageDialog(null, "Nutzer/-in konnte erfolgreich geupdated werden!", "Updaten erfolgreich", JOptionPane.INFORMATION_MESSAGE);

                        LinkedList<User> users = userManager.getUsers();
                        viewUsers(users);

                        //TODO CLEAN FIELDS
                        //AFTER UPDATE?
                    } else {

                        JOptionPane.showMessageDialog(null, "Nutzer/-in konnte nicht geupdated werden!", "Updaten fehlgeschlagen", JOptionPane.CANCEL_OPTION);

                    } } else {
                    
                             JOptionPane.showMessageDialog(null, "Nutzer/-in konnte nicht geupdated werden!", "Nutzername bereits vergeben", JOptionPane.CANCEL_OPTION);
                    }

                } else {

                    JOptionPane.showMessageDialog(null, "Bitte überprüfen Sie die passwörter", "Passwörter nicht identisch", JOptionPane.CANCEL_OPTION);

                }

              
                     
            } catch (NumberFormatException numberFormatException) {

                System.err.println("NumberFormatException");
                System.out.println(numberFormatException.getMessage());
                JOptionPane.showMessageDialog(null, "Nutzer konnte nicht geupdated werden !", "IDfeld falsch ausgefüllt", JOptionPane.CANCEL_OPTION);

            } catch (IllegalArgumentException illegalArgumentException) {

                System.err.println("Illegal Argument");
                System.out.println(illegalArgumentException.getMessage());
                JOptionPane.showMessageDialog(null, "Bitte Geburtstsag im format yyyy-MM-dd eintragen !", "Falsches Datumformat", JOptionPane.CANCEL_OPTION);
            }

        }

    }//GEN-LAST:event_jButtonUpdateUserActionPerformed

    private void jButtonAnimalsToZookeeperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnimalsToZookeeperActionPerformed

        //TODO IN IMPLEMENTATION PHASE:
        //GETTING ID OF INSERTED USER AND PASS IT TO THE MANAGEZOOKEEPERTOANIMAL JFRAME
        this.setVisible(false);
        JFrame thisFrame = this;
        /* Create and display the JFrame MangeZookeeperToAnimal*/
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageZookeeperToAnimalJFrame(thisFrame,zooManager).setVisible(true);
            }
        });

    }//GEN-LAST:event_jButtonAnimalsToZookeeperActionPerformed

    private void jTableUserDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableUserDataMouseClicked

        // TODO CHECK MODE !!!
        int rowIndex = jTableUserData.getSelectedRow();
        TableModel model = jTableUserData.getModel();

        jTextFieldID.setText(model.getValueAt(rowIndex, 0).toString());
        String salutation = model.getValueAt(rowIndex, 2).toString();
        jComboBoxSalutation.setSelectedItem(salutation);
        jTextFieldFirstname.setText(model.getValueAt(rowIndex, 4).toString());
        jTextFieldLastname.setText(model.getValueAt(rowIndex, 5).toString());
        jTextFieldStreet.setText(model.getValueAt(rowIndex, 10).toString());
        jTextFieldZIP.setText(model.getValueAt(rowIndex, 9).toString());
        jTextFieldCity.setText(model.getValueAt(rowIndex, 11).toString());
        jTextFieldCountry.setText(model.getValueAt(rowIndex, 12).toString());
        jTextFieldPhoneNumber.setText(model.getValueAt(rowIndex, 6).toString());
        jTextFieldBirthday.setText(model.getValueAt(rowIndex, 7).toString());
        String shift = model.getValueAt(rowIndex, 1).toString();
        jComboBoxShift.setSelectedItem(shift);
        jTextFieldUsername.setText(model.getValueAt(rowIndex, 3).toString());
        jTextFieldEMail.setText(model.getValueAt(rowIndex, 8).toString());


    }//GEN-LAST:event_jTableUserDataMouseClicked

    /**
     * Method to disable/enable buttons depending user/zookeeper mode and
     * operation selection.
     *
     * @return The mode as String, null if unknown mode
     */
    private String updateButtonsAndLabels() {

        if (jRadioButtonAdmin.isSelected()) {
            System.out.println("Admin Mode");
            userType = "Admin";
            jComboBoxShift.setEnabled(false);
            jLabelShift.setEnabled(false);
            jButtonAnimalsToZookeeper.setEnabled(false);
            if (jRadioButtonAdd.isSelected()) {
                System.out.println("    Add mode");
                mode = "Add";
                jButtonAddUser.setEnabled(true);
                jButtonUpdateUser.setEnabled(false);
                jButtonDeleteUser.setEnabled(false);
                jTextFieldID.setEnabled(false);
                jLabelID.setEnabled(false);
                jLabelID.setEnabled(false);
                jLabelSearch.setEnabled(false);
                jButtonSearch.setEnabled(false);

                return "Add admin";

            } else if (jRadioButtonUpdate.isSelected()) {
                System.out.println("    Update mode");
                mode = "Update";
                jButtonAddUser.setEnabled(false);
                jButtonUpdateUser.setEnabled(true);
                jButtonDeleteUser.setEnabled(false);
                jTextFieldID.setEnabled(true);
                jLabelID.setEnabled(true);
                jLabelSearch.setEnabled(true);
                jButtonSearch.setEnabled(true);

                return "Update admin";

            } else if (jRadioButtonDelete.isSelected()) {

                System.out.println("    Delete mode");
                mode = "Delete";
                jButtonAddUser.setEnabled(false);
                jButtonUpdateUser.setEnabled(false);
                jButtonDeleteUser.setEnabled(true);
                jTextFieldID.setEnabled(true);
                jLabelID.setEnabled(true);
                jLabelSearch.setEnabled(true);
                jButtonSearch.setEnabled(true);

                return "Delete admin";
            }
        } else {

            System.out.println("Zookeeper Mode");
            jComboBoxShift.setEnabled(true);
            jLabelShift.setEnabled(true);
            userType = "Zookeeper";
            if (jRadioButtonAdd.isSelected()) {
                System.out.println("    Add mode");
                jButtonAnimalsToZookeeper.setEnabled(true);
                jButtonAddUser.setEnabled(true);
                jButtonUpdateUser.setEnabled(false);
                jButtonDeleteUser.setEnabled(false);
                jTextFieldID.setEnabled(false);
                jLabelID.setEnabled(false);
                jLabelID.setEnabled(false);
                jLabelSearch.setEnabled(false);
                jButtonSearch.setEnabled(false);
                mode = "Add";
                return "Add zookeeper";
            } else if (jRadioButtonUpdate.isSelected()) {
                System.out.println("    Update mode");
                mode = "Update";
                jButtonAnimalsToZookeeper.setEnabled(true);
                jButtonAddUser.setEnabled(false);
                jButtonUpdateUser.setEnabled(true);
                jButtonDeleteUser.setEnabled(false);
                jTextFieldID.setEnabled(true);
                jLabelID.setEnabled(true);
                jLabelSearch.setEnabled(true);
                jButtonSearch.setEnabled(true);

                return "Update zookeeper";

            } else if (jRadioButtonDelete.isSelected()) {
                mode = "delete";
                System.out.println("    Delete mode");
                jButtonAnimalsToZookeeper.setEnabled(false);
                jButtonAddUser.setEnabled(false);
                jButtonUpdateUser.setEnabled(false);
                jButtonDeleteUser.setEnabled(true);
                jTextFieldID.setEnabled(true);
                jLabelID.setEnabled(true);
                jLabelSearch.setEnabled(true);
                jButtonSearch.setEnabled(true);

                return "Delete zookeeper";
            }

        }

        return null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageUserJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageUserJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageUserJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageUserJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        String url = "jdbc:mysql://localhost/";
        String username = "root";
        String password = "0000";
        String dbName = "zoo";

        ZooManager zooManager = new ZooManager(url, dbName, username, password);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageUserJFrame(null, zooManager).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupOperation;
    private javax.swing.ButtonGroup buttonGroupUserType;
    private javax.swing.JButton jButtonAddUser;
    private javax.swing.JButton jButtonAnimalsToZookeeper;
    private javax.swing.JButton jButtonDeleteUser;
    private javax.swing.JButton jButtonGoBack;
    private javax.swing.JButton jButtonHelp;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonUpdateUser;
    private javax.swing.JComboBox<String> jComboBoxSalutation;
    private javax.swing.JComboBox<String> jComboBoxShift;
    private javax.swing.JLabel jLabelBirthday;
    private javax.swing.JLabel jLabelCity;
    private javax.swing.JLabel jLabelConfirmPassword;
    private javax.swing.JLabel jLabelCountry;
    private javax.swing.JLabel jLabelEMail;
    private javax.swing.JLabel jLabelFirstname;
    private javax.swing.JLabel jLabelID;
    private javax.swing.JLabel jLabelLastname;
    private javax.swing.JLabel jLabelOperation;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JLabel jLabelPhoneNumber;
    private javax.swing.JLabel jLabelSalutation;
    private javax.swing.JLabel jLabelSearch;
    private javax.swing.JLabel jLabelShift;
    private javax.swing.JLabel jLabelShowDateTime;
    private javax.swing.JLabel jLabelStreet;
    private javax.swing.JLabel jLabelUserType;
    private javax.swing.JLabel jLabelUsername;
    private javax.swing.JLabel jLabelZIP;
    private javax.swing.JPanel jPanelOperation;
    private javax.swing.JPasswordField jPasswordFieldConfirm;
    private javax.swing.JPasswordField jPasswordFieldEnteredPW;
    private javax.swing.JRadioButton jRadioButtonAdd;
    private javax.swing.JRadioButton jRadioButtonAdmin;
    private javax.swing.JRadioButton jRadioButtonDelete;
    private javax.swing.JRadioButton jRadioButtonUpdate;
    private javax.swing.JRadioButton jRadioButtonZookeeper;
    private javax.swing.JScrollPane jScrollPaneUserData;
    private javax.swing.JTable jTableUserData;
    private javax.swing.JTextField jTextFieldBirthday;
    private javax.swing.JTextField jTextFieldCity;
    private javax.swing.JTextField jTextFieldCountry;
    private javax.swing.JTextField jTextFieldEMail;
    private javax.swing.JTextField jTextFieldFirstname;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JTextField jTextFieldLastname;
    private javax.swing.JTextField jTextFieldPhoneNumber;
    private javax.swing.JTextField jTextFieldStreet;
    private javax.swing.JTextField jTextFieldUsername;
    private javax.swing.JTextField jTextFieldZIP;
    // End of variables declaration//GEN-END:variables

    //Own delcared private variable
    private javax.swing.JFrame goBackFrame;
    private Methods methods;
    private String mode;
    private String userType;
    private ZooManager zooManager;
    private UserManager userManager;
}
